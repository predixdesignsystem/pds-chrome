{{#if chromeless}}
  {{!--
    Loads the actual application, not the shell wrapper. The application
    rendered here will be loaded inside an iFrame.
  --}}
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{appname}}</title>
    {{!-- Load favico and global theme stylesheets  --}}
    <link rel="shortcut icon" type="image/png" href="/ui-hub-assets/bower_components/pxh-chrome/dist/favicon.ico">
    <link rel="stylesheet" href="/ui-hub-assets/bower_components/pxh-chrome/dist/css/pxh-chrome.min.css">
    {{!-- Load global scripts and CSS specified by app --}}
    {{#each helpers.globalScripts}}
      <script src="{{this}}"></script>
    {{/each}}
    {{#each helpers.globalCSS}}
      <link rel="stylesheet" href="{{this}}"/>
    {{/each}}
  </head>
  <body>
    {{{body}}}
  </body>
  </html>
{{else}}
  {{!--
    Loads a bit of "chrome" that surrounds the application iFrame, including
    the navigation, branding bar, and notifications tray.
  --}}
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{appname}}</title>
    {{!-- Load newrelicHeader provided by back-end --}}
    {{{newrelicHeader}}}
    {{!-- Load webcomponentsjs polyfill if needed --}}
    <script defer type="text/javascript">
    (function() {
      'use strict';
      window.WebComponentsReady = false;
      var onload = function() {
        window.WebComponentsReady = true;
        // For native Imports, manually fire WebComponentsReady so user code
        // can use the same code path for native and polyfill'd imports.
        if (!window.HTMLImports) {
          document.dispatchEvent(
            new CustomEvent('WebComponentsReady', {bubbles: true})
          );
        }
      };
      var webComponentsSupported = (
        'registerElement' in document && 'import' in document.createElement('link') && 'content' in document.createElement('template')
      );
      if (!webComponentsSupported) {
        var script = document.createElement('script');
        script.async = true;
        script.src = '/ui-hub-assets/bower_components/webcomponentsjs/webcomponents-lite.min.js';
        script.onload = onload;
        document.head.appendChild(script);
      } else {
        onload();
      }
    })();
    </script>
    {{!-- Load Polymer library --}}
    <link rel="import" href="/ui-hub-assets/bower_components/polymer/polymer.html"/>
    {{!-- Load Predix Design System components --}}
    <link rel="import" href="/ui-hub-assets/bower_components/px-app-nav/px-app-nav.html"/>
    <link rel="import" href="/ui-hub-assets/bower_components/px-branding-bar/px-branding-bar.html"/>
    <link rel="import" href="/ui-hub-assets/bower_components/px-theme/px-theme-styles.html"/>
    {{!-- Load pds-chrome local components --}}
    <link rel="import" href="/ui-hub-assets/bower_components/pds-chrome/src/elements/pds-chrome-user-profile.html"/>
    {{!-- Use Predix Design System light theme --}}
    <style is="custom-style" include="px-theme-styles"></style>
    {{!-- Set basic theme chrome styles --}}
    <style>
      html, body {
        margin: 0;
        padding: 0;
        font-size: 15px;
      }
      #header {
        display: block;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 999;
      }
      #app {
        display: block;
        position: fixed;
        top: 6rem;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        border: none;
      }
    </style>
  </head>
  <body>
    <div id="header">
      <px-branding-bar id="branding-bar" application-title="{{appname}}"></px-branding-bar>
      <px-app-nav id="app-nav">
        <pds-chrome-user-profile id="user-profile" slot="actions"
            name="David Leonard"
            img-url="/ui-hub-assets/bower_components/pds-chrome/test/img/profile-picture.jpg"
            profile-links='[
              {"label":"Edit profile", "path":"/user/#/profile"},
              {"label":"Logout", "path":"/logout"}
            ]'
            settings-links='[
              {"label":"Preferences", "path":"/settings/#/preferences"},
              {"label":"Manage team", "path":"/settings/#/team"}
            ]'>
        </pds-chrome-user-profile>
      </px-app-nav>
    </div>
    <div id="app-container">
      <iframe id="app"></iframe>
    </div>
    {{!-- Load Predix Design System chrome utilities --}}
    <script src="/ui-hub-assets/bower_components/pds-chrome/src/scripts/app-hub-utilities.js"></script>
    <!-- <script src="/ui-hub-assets/bower_components/pds-chrome/src/scripts/pds-chrome-utilities.js"></script> -->
    <script>
      (function() {
        'use strict';
        var navObject = {{{navStr}}};
        window.nav = navObject;
        window.AppHub = new window.AppHubUtil(navObject);

        function initApp() {
          initLocationListeners();
          initAppFrame();
          initAppNav();
          initUserProfile();
        };

        function initAppFrame() {
          var frame = document.getElementById('app');
          /* Detect app navigation events */
          frame.onload = function() {
            console.log('%s was loaded in the iFrame', frame.src);
            frame.contentWindow.addEventListener('hashchange', frameOnHashChange.bind(null, frame));
            frame.contentWindow.addEventListener('popstate', framePopState.bind(null, frame));
          };
          /* Load initial route */
          var path = addChromelessQuery(getPath(window.location));
          frame.src = path;
        };

        function initAppNav() {
          var appNavElement = document.getElementById('app-nav');
          /* Set the initial keys and items */
          appNavElement.keys = {
            id: 'id',
            label: 'label',
            children: 'items',
            icon: 'icon'
          };
          appNavElement.items = AppHub.Nav.getItems();
          /**
           * When the user changes the page, call the AppHub helpers to update
           * the application state
           */
          appNavElement.addEventListener('selected-changed', function(e) {
            setPagePath(e.detail.value.path);
          });
          /**
           * If there is is an initial window path select the corresponding
           * navigation item
           */
          if (window.location.pathname !== "") {
            setSelectedNavPath(getPathWithoutQuery(window.location));
          }
        };

        function initUserProfile() {

        };

        function initLocationListeners() {
          window.onpopstate = function() {
            window.dispatchEvent(new CustomEvent('app-hub-shell-location-changed', {
              detail: { source: 'popstate' }
            }));
          };

          window.onhashchange = function() {
            window.dispatchEvent(new CustomEvent('app-hub-shell-location-changed', {
              detail: { source: 'hashchange' }
            }));
          };

          window.addEventListener('app-hub-shell-location-changed', function() {
            setFramePath(addChromelessQuery(getPath(window.location)));
            setSelectedNavPath(getPathWithoutQuery(window.location));
          });
        };

        /**** UPDATE SHELL PAGE ELEMENTS ****/

        function setPagePath(newPath) {
          if (getPath(window.location) !== newPath) {
            console.log('update page path')
            history.pushState(null, null, newPath);
            window.dispatchEvent(new CustomEvent('app-hub-shell-location-changed'));
          }
        };

        function setFramePath(newPath) {
          var frame = document.getElementById('app');
          if (getPath(frame.contentWindow.location) !== newPath) {
            frame.contentWindow.location.replace(newPath, false);
          }
        };

        function setSelectedNavPath(newPath) {
          var appNavElement = document.getElementById('app-nav');
          var item = AppHub.Nav.findNavItemByPath(newPath);
          if (item !== null) {
            appNavElement.select(item);
          }
        };

        /**** HANDLE IFRAME NAVIGATION EVENTS ****/

        function frameOnHashChange(frame) {

        };

        function frameOnPopState(frame) {

        };

        /**** SMALL URL UTILS ****/

        function getPath(locationObject) {
          return locationObject.pathname + locationObject.search + locationObject.hash;
        };

        function getPathWithoutQuery(locationObject) {
          return locationObject.pathname +  locationObject.hash;
        };

        function addChromelessQuery(path) {
          var uriParts = parseUri(path);
          if (uriParts.queryKey.hasOwnProperty('chromeless') && uriParts.queryKey.chromeless === 'true') {
            return path;
          }
          return uriParts.path + '?chromeless=true' + (uriParts.query.length>0 ? '&' + uriParts.query : '') + (uriParts.anchor.length>0 ? '#' + uriParts.anchor : '');
        };

        /**
         * parseUri 1.2.2
         * (c) Steven Levithan <stevenlevithan.com>
         * MIT License
         */
        function parseUri (str) {
          var	o   = parseUri.options,
          m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
          uri = {},
          i   = 14;
          while (i--) uri[o.key[i]] = m[i] || "";
          uri[o.q.name] = {};
          uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
            if ($1) uri[o.q.name][$1] = $2;
          });
          return uri;
        };
        parseUri.options = {
          strictMode: false,
          key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
          q:   {
            name:   "queryKey",
            parser: /(?:^|&)([^&=]*)=?([^&]*)/g
          },
          parser: {
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
          }
        };

        /**
         * CustomEvent polyfill
         * Credit to https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
         */
        (function() {
          if (typeof window.CustomEvent === "function") return false;

          function CustomEvent (event, params) {
            params = params || { bubbles: false, cancelable: false, detail: undefined };
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
           }

          CustomEvent.prototype = window.Event.prototype;

          window.CustomEvent = CustomEvent;
        })();

        if (window.WebComponentsReady) {
          initApp();
        } else {
          window.addEventListener('WebComponentsReady', initApp.bind(this));
        }
      })();
    </script>
  </body>
  </html>
{{/if}}
